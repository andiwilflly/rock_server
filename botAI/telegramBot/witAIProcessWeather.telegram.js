const Fuse = require('fuse.js');
const fetch = require("node-fetch");
const WIKI = require('wikijs').default;
const weather = require('openweather-apis');
const randomAnswer = require('./functions/randomAnswer.function');

// TODO: https://openbase.io/js/dark-sky-api

const KEY = 'e0ec6da3ca0381df4cc5564f7053ca85';

weather.setLang('ru');
weather.setAPPID(KEY);

module.exports = async function(ctx, witAns) {
    const locationEntity = witAns.entities['wit$location:location'] ? witAns.entities['wit$location:location'][0] : null;
    const dateEntity = witAns.entities['date_time:date_time'] ? witAns.entities['date_time:date_time'][0] : null;

    if(!locationEntity) return ctx.reply(randomAnswer([
        '–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥?',
        '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?',
        '–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥',
        '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≥–æ—Ä–æ–¥ –∏ –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∑–∞–¥–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ–≥–æ–¥–∞ –≤ —á–µ—Ç–≤–µ—Ä–≥)',
        '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'
    ]));

    const result = await getAllWeather(locationEntity.value, dateEntity);

    return ctx.reply(result);
}


async function getAllWeather(origCity, dateEntity = {}) {

    weather.setCity(origCity);
    return new Promise(async resolve => {
        await weather.getAllWeather(async function(err, res) {
            // if(res.cod === '404') {
               try {
                   const wikiAPI = await WIKI({ apiUrl: 'https://ru.wikipedia.org/w/api.php' });
                   const page = await wikiAPI.search(origCity, 2);

                   const city = page.results.sort((a,b)=> a.length - b.length)[0];

                   if(dateEntity) {
                       getDateForecastWeather(city, dateEntity, resolve);
                   } else {
                       resolve(await getWeatherCity(city, Date.now()));
                   }
               } catch(e) {
                   resolve('error: ' + e);
               }
            // } else {
            //     resolve(res);
            // }
        });
    })
}



async function getDateForecastWeather(city, dateEntity, resolve) {
    const dateType = fuse.search(dateEntity.value)[0] ? fuse.search(dateEntity.value)[0].item : '';

    let weekDay = '';
    switch (true) {
        case dateType === '—Å–µ–≥–æ–¥–Ω—è':
            weekDay = weekDays[(new Date()).getDay()];
            break;
        case dateEntity.value === 'poslezavtra':
        case dateEntity.value === '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞':
            weekDay = weekDays[(new Date()).getDay()+2] || weekDays[((new Date()).getDay()+2) - 6] || '?';
            break;
        case dateType === 'zavtra':
        case dateType === '–∑–∞–≤—Ç—Ä–∞':
            weekDay = weekDays[(new Date()).getDay()+1] || 'Sun';
            break;
        default:
            weekDay = weekDays[weekDaysRus.indexOf(dateType)];
    }

    console.log('nextDate:', nextDate(weekDays.indexOf(weekDay)));

    resolve(await getWeatherCity(city, nextDate(weekDays.indexOf(weekDay)), true));
}


async function getWeatherCity(city, timeMs, isFeature = false) {
    const wikiAPI = await WIKI({ apiUrl: 'https://ru.wikipedia.org/w/api.php' });
    const page = await wikiAPI.find(city);

    const { lat, lon } = await page.coordinates();

    let result = await fetch(`http://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=ru&units=metric&appid=e0ec6da3ca0381df4cc5564f7053ca85`)
    result = await result.json();

    const dayNumber = new Date(timeMs).getDate();
    const hourly = result.hourly.filter(hour => hour.dt *1000 > Date.now() && dayNumber === new Date(hour.dt *1000).getDate());
    const daily = result.daily.filter(day => new Date(day.dt * 1000).getDay() === new Date(timeMs).getDay())[0];

    if(isFeature) {
        const pressure = Math.round(daily.pressure / 133.3224) * 100; // Pa -> –º–º. —Ä—Ç. —Å—Ç.
        return `
        
                üè† ${city} (${daily.weather[0].description})
                üìÖ  ${new Date(timeMs).toLocaleDateString()}
                üå° –£—Ç—Ä–æ  ${Math.round(daily.temp.morn)}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${Math.round(daily.feels_like.morn)}¬∞C)
                üå° –î–µ–Ω—å  ${Math.round(daily.temp.day)}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${Math.round(daily.feels_like.day)}¬∞C)
                üå° –í–µ—á–µ—Ä ${Math.round(daily.temp.eve)}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${Math.round(daily.feels_like.eve)}¬∞C)
                üå° –ù–æ—á—å  ${Math.round(daily.temp.night)}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${Math.round(daily.feels_like.night)}¬∞C)            
                üå´ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: ${pressure} –º–º. —Ä—Ç. —Å—Ç.
                üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: ${daily.humidity }%
                üå• –û–±–ª–∞—á–Ω–æ—Å—Ç—å: ${daily.clouds}%
               ${daily.rain ? 'üå® –°–Ω–µ–≥' : daily.snow ? 'üåß –î–æ–∂–¥—å' : '–ë–µ–∑ –æ—Å–∞–¥–∫–æ–≤'}   
            `
    }

    const pressure = Math.round(result.current.pressure / 133.3224) * 100; // Pa -> –º–º. —Ä—Ç. —Å—Ç.
    return `
    
            üè† ${city} (${result.current.weather[0].description})
            üå° ${Math.round(result.current.temp)}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${Math.round(result.current.feels_like)}¬∞C)
            üå™ ${Math.round(result.current.wind_speed)} –º–µ—Ç—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥—É
            üå´ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: ${pressure} –º–º. —Ä—Ç. —Å—Ç.
            üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: ${result.current.humidity }%
            üå• –û–±–ª–∞—á–Ω–æ—Å—Ç—å: ${result.current.clouds}%   
            ${result.current.rain ? 'üå® –°–Ω–µ–≥' : result.current.snow ? 'üåß –î–æ–∂–¥—å' : '–ë–µ–∑ –æ—Å–∞–¥–∫–æ–≤'}   
        ${hourly.map(hour => {
            return `${new Date(hour.dt * 1000).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: false })} üå° ${Math.round(hour.temp)}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${Math.round(hour.feels_like)}¬∞C)
            `
        }).join('')}
    `;
}


function nextDate(dayIndex) {
    const today = new Date();
    today.setDate(today.getDate() + (dayIndex - 1 - today.getDay() + 7) % 7 + 1);
    return new Date(today).getTime();
}

const data = [
    '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    '–≤—Ç–æ—Ä–Ω–∏–∫',
    '—Å—Ä–µ–¥–∞',
    '—á–µ—Ç–≤–µ—Ä–≥',
    '–ø—è—Ç–Ω–∏—Ü–∞',
    '—Å—É–±–±–æ—Ç–∞',
    '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
    '—Å–µ–≥–æ–¥–Ω—è',
    '–∑–∞–≤—Ç—Ä–∞',
    'zavtra',
    'poslezavtra',
    '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞',
];

const weekDaysRus = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞'];
const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

const fuse = new Fuse(data, { threshold: 0.3 });


// (async function () {
//     console.log(await getWeatherCity('–ö–∏–µ–≤', Date.now(), false));
// })();